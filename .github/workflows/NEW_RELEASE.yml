name: NEW_RELEASE

on:
  workflow_dispatch:
    inputs:
      version:
        type: string
        required: true
        description: 'Version Number (eg: 0.0.0)'
      merge_master:
        type: boolean
        required: true
        description: 'Merge Dev to Master'
        default: true
      push_docker:
        type: boolean
        required: true
        description: 'Push to docker'
        default: true

permissions:
  contents: write

jobs:
  # verify version format
  verify_version_format:
    runs-on: ubuntu-latest
    steps:
      # verify version format
      - name: Verify version format
        shell: bash
        run: |
          if ! [[ "${{ github.event.inputs.version }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Error: Invalid version format."
            exit 1
          fi
  
  # merge master
  merge_master:
    if: ${{ github.event.inputs.merge_master == 'true' }}
    needs: verify_version_format
    uses: ./.github/workflows/_merge_master.yml
    with:
      version: ${{ github.event.inputs.version }}
  
  # build app
  build_app:
    needs: merge_master
    uses: ./.github/workflows/_build_app.yml
  
  # build electron
  build_electron:
    needs: build_app
    uses: ./.github/workflows/_build_electron.yml
    secrets:
      SIGNING_WINDOWS_CERT_KEY: ${{ secrets.SIGNING_WINDOWS_CERT_KEY }}
      SIGNING_WINDOWS_CERT_PASS: ${{ secrets.SIGNING_WINDOWS_CERT_PASS }}
      SIGNING_MACOS_CERT_KEY: ${{ secrets.SIGNING_MACOS_CERT_KEY }}
      SIGNING_MACOS_CERT_PASS: ${{ secrets.SIGNING_MACOS_CERT_PASS }}
      SIGNING_MACOS_NOTARY_KEY: ${{ secrets.SIGNING_MACOS_NOTARY_KEY }}
      SIGNING_MACOS_NOTARY_ID: ${{ secrets.SIGNING_MACOS_NOTARY_ID }}
      SIGNING_MACOS_NOTARY_ISSUER: ${{ secrets.SIGNING_MACOS_NOTARY_ISSUER }}
  
  # push docker
  push_docker:
    if: ${{ github.event.inputs.push_docker == 'true' }}
    needs: build_electron
    uses: ./.github/workflows/_push_docker.yml
    with:
      version: ${{ github.event.inputs.version }}
    secrets:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}
  
  # new release
  new_release:
    needs: build_electron
    runs-on: ubuntu-latest
    steps:
      # get electron artifacts
      - name: Get electron artifacts
        uses: actions/download-artifact@v4
        with:
          path: release_artifacts
          pattern: built-electron-*
          merge-multiple: true
      
      # rename artifacts for release
      - name: Rename artifacts for release
        shell: bash
        run: |
          mkdir -p ./release
          find ./release_artifacts -type f -regex ".*\.\(exe\|dmg\|deb\)$" | while read FILE; do
            NEW_NAME="AlphaBot-${{ github.event.inputs.version }}.${FILE##*.}"
            NEW_PATH="./release/${NEW_NAME}"
            mv "${FILE}" "${NEW_PATH}"
          done
      
      # create release
      - name: Create release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          target_commitish: master
          tag_name: v${{ github.event.inputs.version }}
          name: Release v${{ github.event.inputs.version }}
          generate_release_notes: true
          draft: true
          files: ./release/*