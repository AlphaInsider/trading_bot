name: _build_electron

on:
  workflow_call:
    secrets:
      SIGNING_CERT_WINDOWS:
        required: true
      SIGNING_CERT_MACOS:
        required: true
      SIGNING_PASS:
        required: true

jobs:
#  # build windows
#  build_windows:
#    runs-on: windows-latest
#    steps:
#      # get app artifacts
#      - name: Get app artifacts
#        uses: actions/download-artifact@v4
#        with:
#          name: built-app
#      
#      # build electron
#      - name: Build electron app
#        shell: bash
#        run: |
#          npm install
#          npm run electron-make
#      
#      #TODO: sign electron app
#      - name: Sign electron app
#        shell: pwsh
#        env:
#          SIGNING_CERT_WINDOWS: ${{ secrets.SIGNING_CERT_WINDOWS }}
#          SIGNING_PASS: ${{ secrets.SIGNING_PASS }}
#        run: |
#          # Path to most recent signtool
#          $signtool = Get-ChildItem "C:/Program Files (x86)/Windows Kits/10/bin/*" -Recurse -Filter signtool.exe | 
#                      Sort-Object -Property Directory -Descending | 
#                      Select-Object -First 1 -ExpandProperty FullName
#          
#          # Decode the PFX from Base64
#          $pfxContent = [System.Convert]::FromBase64String($env:SIGNING_CERT_WINDOWS)
#          $pfxPath = "signingCert.pfx"
#          [System.IO.File]::WriteAllBytes($pfxPath, $pfxContent)
#          
#          # Find the executable path
#          $exePath = Get-ChildItem .\out\make\ -Recurse -Filter *.exe | Select-Object -First 1 -ExpandProperty FullName
#          
#          # Sign the executable
#          & $signtool sign /f $pfxPath /p $env:SIGNING_PASS /tr http://timestamp.digicert.com /td sha256 /fd sha256 "$exePath"
#          
#          # Verify executable is signed
#          & $signtool verify /pa /v "$exePath"
#      
#      # upload artifacts
#      - name: Upload electron artifacts
#        uses: actions/upload-artifact@v4
#        with:
#          name: built-electron-windows
#          path: ./out/make
  
  # build macos
  build_macos:
    runs-on: macos-latest
    steps:
      # get app artifacts
      - name: Get app artifacts
        uses: actions/download-artifact@v4
        with:
          name: built-app
      
      # setup python
      - name: Setup python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      # set macOS certificate
      - name: Set macOS certificate
        uses: apple-actions/import-codesign-certs@v2
        with:
          p12-file-base64: ${{ secrets.SIGNING_CERT_MACOS }}
          p12-password: ${{ secrets.SIGNING_PASS }}
      
      # get certificate ID
      - name: Get certificate ID
        run: |
          CERT_ID=$(security find-identity -p basic -v | awk -F'"' '{print $2}')
          echo "CERT_ID=${CERT_ID}" >> $GITHUB_ENV
          echo $CERT_ID
          ! echo "$CERT_ID" | grep -q "Alpha" && exit 1
      
      #TODO: debug
      - name: Setup tmate session
        uses: mxschmitt/action-tmate@v3
        with:
          limit-access-to-actor: true
      
      # build electron
      - name: Build electron app
        shell: bash
        run: |
          npm install
          npm run electron-make
      
      #TODO: debug
      - name: Setup tmate session
        uses: mxschmitt/action-tmate@v3
        with:
          limit-access-to-actor: true
      
      # sign electron app
      - name: Sign electron app
        shell: bash
        run: |
          certName="Developer ID Application: Alpha Insider Inc. (7WMUCJHPUL)"
          dmgPath=$(find ./out/make -type f -name "*.dmg")
          codesign --force --verbose --sign "$certName" "$dmgPath"
          codesign --verify "$dmgPath"
      
      #TODO: debug
      - name: Setup tmate session
        uses: mxschmitt/action-tmate@v3
        with:
          limit-access-to-actor: true
      
      # upload artifacts
      - name: Upload electron artifacts
        uses: actions/upload-artifact@v4
        with:
          name: built-electron-macos
          path: ./out/make
  
  # build linux
  build_linux:
    runs-on: ubuntu-latest
    steps:
      # get app artifacts
      - name: Get app artifacts
        uses: actions/download-artifact@v4
        with:
          name: built-app
      
      # build electron
      - name: Build electron app
        shell: bash
        run: |
          npm install
          npm run electron-make
      
      # upload artifacts
      - name: Upload electron artifacts
        uses: actions/upload-artifact@v4
        with:
          name: built-electron-linux
          path: ./out/make